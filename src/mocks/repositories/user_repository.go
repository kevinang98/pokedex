// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "pokedex/src/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetUserData provides a mock function with given fields: req
func (_m *UserRepository) GetUserData(req map[string]interface{}) (models.User, error) {
	ret := _m.Called(req)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (models.User, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) models.User); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: username, password, role
func (_m *UserRepository) RegisterUser(username string, password string, role string) error {
	ret := _m.Called(username, password, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(username, password, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCapturedPokemonUser provides a mock function with given fields: id, captured
func (_m *UserRepository) UpdateCapturedPokemonUser(id int, captured string) error {
	ret := _m.Called(id, captured)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(id, captured)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
