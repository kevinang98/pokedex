// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "pokedex/src/models"

	mock "github.com/stretchr/testify/mock"
)

// PokedexRepository is an autogenerated mock type for the PokedexRepository type
type PokedexRepository struct {
	mock.Mock
}

// AddPokemon provides a mock function with given fields: pokelist
func (_m *PokedexRepository) AddPokemon(pokelist []models.Pokedex) error {
	ret := _m.Called(pokelist)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Pokedex) error); ok {
		r0 = rf(pokelist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePokemon provides a mock function with given fields: pid
func (_m *PokedexRepository) DeletePokemon(pid int) error {
	ret := _m.Called(pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPokemon provides a mock function with given fields: name, sort, option, listPID, pokeType, offset, limit, order
func (_m *PokedexRepository) GetPokemon(name string, sort string, option string, listPID []int, pokeType []string, offset int64, limit int64, order int64) ([]models.Pokedex, error) {
	ret := _m.Called(name, sort, option, listPID, pokeType, offset, limit, order)

	var r0 []models.Pokedex
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, []int, []string, int64, int64, int64) ([]models.Pokedex, error)); ok {
		return rf(name, sort, option, listPID, pokeType, offset, limit, order)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []int, []string, int64, int64, int64) []models.Pokedex); ok {
		r0 = rf(name, sort, option, listPID, pokeType, offset, limit, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Pokedex)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []int, []string, int64, int64, int64) error); ok {
		r1 = rf(name, sort, option, listPID, pokeType, offset, limit, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePokemon provides a mock function with given fields: poke
func (_m *PokedexRepository) UpdatePokemon(poke models.Pokedex) error {
	ret := _m.Called(poke)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Pokedex) error); ok {
		r0 = rf(poke)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPokedexRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPokedexRepository creates a new instance of PokedexRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPokedexRepository(t mockConstructorTestingTNewPokedexRepository) *PokedexRepository {
	mock := &PokedexRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
