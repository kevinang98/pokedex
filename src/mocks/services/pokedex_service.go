// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "pokedex/src/models"

	mock "github.com/stretchr/testify/mock"
)

// PokedexService is an autogenerated mock type for the PokedexService type
type PokedexService struct {
	mock.Mock
}

// AddPokemon provides a mock function with given fields: pokeList
func (_m *PokedexService) AddPokemon(pokeList []models.Pokedex) error {
	ret := _m.Called(pokeList)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Pokedex) error); ok {
		r0 = rf(pokeList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePokemon provides a mock function with given fields: pidList
func (_m *PokedexService) DeletePokemon(pidList []int) (string, error) {
	ret := _m.Called(pidList)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) (string, error)); ok {
		return rf(pidList)
	}
	if rf, ok := ret.Get(0).(func([]int) string); ok {
		r0 = rf(pidList)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(pidList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPokemon provides a mock function with given fields: id, name, sort, option, pokeType, offset, limit, order
func (_m *PokedexService) GetPokemon(id int, name string, sort string, option string, pokeType []string, offset int64, limit int64, order int64) ([]models.Pokedex, error) {
	ret := _m.Called(id, name, sort, option, pokeType, offset, limit, order)

	var r0 []models.Pokedex
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, string, string, []string, int64, int64, int64) ([]models.Pokedex, error)); ok {
		return rf(id, name, sort, option, pokeType, offset, limit, order)
	}
	if rf, ok := ret.Get(0).(func(int, string, string, string, []string, int64, int64, int64) []models.Pokedex); ok {
		r0 = rf(id, name, sort, option, pokeType, offset, limit, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Pokedex)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, string, string, []string, int64, int64, int64) error); ok {
		r1 = rf(id, name, sort, option, pokeType, offset, limit, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePokemon provides a mock function with given fields: pokeList
func (_m *PokedexService) UpdatePokemon(pokeList []models.Pokedex) (string, error) {
	ret := _m.Called(pokeList)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.Pokedex) (string, error)); ok {
		return rf(pokeList)
	}
	if rf, ok := ret.Get(0).(func([]models.Pokedex) string); ok {
		r0 = rf(pokeList)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]models.Pokedex) error); ok {
		r1 = rf(pokeList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPokedexService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPokedexService creates a new instance of PokedexService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPokedexService(t mockConstructorTestingTNewPokedexService) *PokedexService {
	mock := &PokedexService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
